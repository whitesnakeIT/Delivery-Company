openapi: 3.0.11
info:
  title: API for Delivery Application
  description: This API provides functionality for managing customers, couriers, orders, tracking and deliveries
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
paths:
  /customers:
    get:
      summary: Get all customers
      operationId: getAllCustomers
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Create a new customer
      operationId: createCustomer
      requestBody:
        description: Customer object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        "201":
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  /customers/{id}:
    get:
      summary: Get a customer by ID
      operationId: getCustomer
      parameters:
        - name: id
          in: path
          description: ID of customer to get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "404":
          description: Customer not found
    put:
      summary: Update a customer
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          description: ID of customer to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Customer object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        "200":
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "404":
          description: Customer not found
    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          description: ID of customer to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Customer deleted successfully
        "404":
          description: Customer not found
  /couriers:
    get:
      summary: Get all couriers
      operationId: getAllCouriers
      responses:
        "200":
          description: List of all couriers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
    post:
      summary: Create a new courier
      operationId: createCourier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Courier'
      responses:
        "201":
          description: Courier created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Courier'
  /couriers/{id}:
    get:
      summary: Get a courier by ID
      operationId: getCourier
      parameters:
        - name: id
          in: path
          description: Courier ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Courier'
    put:
      summary: Update a courier
      operationId: updateCourier
      parameters:
        - name: id
          in: path
          description: Courier ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Courier'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Courier'
    delete:
      summary: Delete a courier
      operationId: deleteCourier
      parameters:
        - name: id
          in: path
          description: Courier ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
  /deliveries:
    get:
      summary: Get all deliveries
      operationId: getAllDeliveries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
    post:
      summary: Create a new delivery
      operationId: createDelivery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
  /deliveries/{id}:
    get:
      summary: Get a delivery by ID
      operationId: getDelivery
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the delivery to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '404':
          description: Not Found
    put:
      summary: Update a delivery by ID
      operationId: updateDelivery
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the delivery to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '404':
          description: Not Found
    delete:
      summary: Delete a delivery by ID
      operationId: deleteDelivery
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the delivery to delete
      responses:
        '204':
          description: No Content
  /orders:
    get:
      summary: Get all orders
      operationId: getAllOrders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{id}:
    get:
      summary: Get an order by ID
      operationId: getOrder
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the order to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
    put:
      summary: Update an order by ID
      operationId: updateOrder
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
    delete:
      summary: Delete an order by ID
      operationId: deleteOrder
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the order to delete
      responses:
        '204':
          description: No Content
  /tracking:
    get:
      summary: Get all tracking
      operationId: getAllTracking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tracking'
    post:
      summary: Create a new tracking
      operationId: createTracking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tracking'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracking'
  /tracking/{id}:
    get:
      summary: Get tracking by ID
      operationId: getTracking
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the tracking to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracking'
        '404':
          description: Not Found
    put:
      summary: Update tracking by ID
      operationId: updateTracking
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the tracking to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tracking'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracking'
        '404':
          description: Not Found
    delete:
      summary: Delete tracking by ID
      operationId: deleteTracking
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the tracking to delete
      responses:
        '204':
          description: No Content


components:
  schemas:
    Courier:
      type: object
      properties:
        id:
          type: integer
          format: int64
        courierCompany:
          $ref: '#/components/schemas/CourierCompany'
        firstName:
          type: string
        lastName:
          type: string
        deliveryList:
          type: array
          items:
            $ref: '#/components/schemas/Delivery'
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    Delivery:
      type: object
#      x-class-extra-annotation: '@com.fasterxml.jackson.annotation.JsonIgnoreProperties({"courier"})'
      properties:
        id:
          type: integer
          format: int64
        deliveryStatus:
          $ref: '#/components/schemas/DeliveryStatus'
        price:
          type: number
          format: double
        deliveryTime:
          type: string
          format: date-time
        courier:
          $ref: '#/components/schemas/Courier'
        order:
          $ref: '#/components/schemas/Order'
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        senderAddress:
          type: string
        receiverAddress:
          type: string
        packageType:
          $ref: '#/components/schemas/PackageType'
        packageSize:
          $ref: '#/components/schemas/PackageSize'
        preferredDeliveryDate:
          type: string
          format: date
        customer:
          $ref: '#/components/schemas/Customer'
    Tracking:
      type: object
      properties:
        id:
          type: integer
          format: int64
        localization:
          type: string
    CourierCompany:
      type: string
      enum: [ DHL, DPD, GLS, UPS, FEDEX ]
    DeliveryStatus:
      type: string
      enum: [ CREATED, PICKED_UP, IN_TRANSIT, DELIVERED, FAILED_DELIVERY_ATTEMPT, RETURNED, LOST ]
    PackageSize:
      type: string
      enum: [ SMALL, MEDIUM, LARGE, EXTRA_LARGE ]
    PackageType:
      type: string
      enum: [ PARCEL, DOCUMENT ]

